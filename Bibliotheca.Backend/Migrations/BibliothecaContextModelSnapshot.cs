// <auto-generated />
using Bibliotheca.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using System;

#nullable disable

namespace Bibliotheca.Migrations
{
    [DbContext(typeof(BibliothecaContext))]
    partial class BibliothecaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bibliotheca.Models.AnimalObservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Class")
                        .HasColumnType("text");

                    b.Property<Guid?>("CoverImageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Family")
                        .HasColumnType("text");

                    b.Property<string>("Genus")
                        .HasColumnType("text");

                    b.Property<string>("Kingdom")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ObservationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Order")
                        .HasColumnType("text");

                    b.Property<string>("Phylum")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Species")
                        .HasColumnType("text");

                    b.Property<string>("Tribe")
                        .HasColumnType("text");

                    b.Property<string>("VernacularName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CoverImageId");

                    b.ToTable("AnimalObservation");
                });

            modelBuilder.Entity("Bibliotheca.Models.ImageData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnimalObservationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AnimalObservationId");

                    b.ToTable("ImageData");
                });

            modelBuilder.Entity("Bibliotheca.Models.AnimalObservation", b =>
                {
                    b.HasOne("Bibliotheca.Models.ImageData", "CoverImage")
                        .WithMany()
                        .HasForeignKey("CoverImageId");

                    b.Navigation("CoverImage");
                });

            modelBuilder.Entity("Bibliotheca.Models.ImageData", b =>
                {
                    b.HasOne("Bibliotheca.Models.AnimalObservation", null)
                        .WithMany("Images")
                        .HasForeignKey("AnimalObservationId");
                });

            modelBuilder.Entity("Bibliotheca.Models.AnimalObservation", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
